PBO

Bedanya prosedural dgn PBO, prosedur variabel array fungsinya terpisan, kalau di PBO disimpan di 1 tempat yaitu Classs

Class = Design / Template, yang dapat digunakan object; class mendefinisikan object
Object = variabel hasil instansiasi/wujud/representasi dari class

berisi :
	-Properti / Atribut = data pada class (variabel/array dll, dapat lebih dri 1), dapat diisi/diubah setelah representasi object 


	-Method / Behaviour = tindakan yg dapat dilakukan, method bs dijalankan setelah instansiasi object dari class dapat void ataupun return. 
							Dapat nampung parameter, dan bisa lebih dari 1 method.

ex. class mobil; properti : warna, jenis, tipe, banyak ban, dll
method : tambah kecepatan, kurangi kec, belok kiri kanan.

Properti dalam suatu object dari class pasti dapat berbeda, sedangkan methodnya pasti sama. Setiap object dari class dapat melakukan segala method 


===========================================================================================================================================================================================
===========================================================================================================================================================================================


Constructor = mmethod khusus/magic otomatis tereksekusi saat instansiasi object (yang otomatis pertama kali di panggil, persiapan data - mengisi properti data)
 biasanya untuk statement conn database, dan nama constructor biasanya sama seperti class

Destructor = kebalikan - method dijalankan jika object dihapus
biasanya close database, dapat berguna jika ingin menjalankan perintah terntu sebelum object dihapus; 
Bahasa Java gapunya destructor karena garbage collector (hapus object gakepakai)

ex. Constructor - Menghidupkan Mobil atau tampil pesan selamat datang. status semacamnya
constructor(warna,tipe,tipe) --- berisi parameter untuk ngisi properti
	properti blaalba
	mehotd balalabla
ketika selesai :
Destructor - Mematikan Mobil, atau tampilkan pesan terimakasih


===========================================================================================================================================================================================
===========================================================================================================================================================================================


Setter, method yang dibuat untuk mengubah/isi nilai pada property
1 stter 1 property jadi set_WarnaMobil
bersifat void

Getter, mengambil isi nilai dari properti
1 getter 1 property jadi get_WarnaMobil
bersifat return

Setter getter penting untuk
	-keamanan data (visibility - access modifier)
	-mudah kontrol property method
	-classs fleksibel - akses penuh property method
	-dapat ganti sebagian code tanpa takut berdampak dgn code lain

Data dari class harus diproteksi, yang bisa merubah properti hanyalah pemiliknya sendiri
setWarnaMobil(data)
getWarnaCat()->return
setWarnaVelgDepanDanBelakang(data1,data2)
getWarnaVelgDepanDanBelakang()


===========================================================================================================================================================================================
===========================================================================================================================================================================================

Konsep Paradigma PBO
4 konsep paradigma kenapa perlu PBO 
dari inheritance,encasuplation,polymorphism, dan abstrraction

Inheritance(Pewarisan) adalah 
didefinisikan saat membuat class, 1 class bisa banyak keturunan, 
banyak class bisa jadi hasil keturunan 1 class

class orangTua harus dibuat  lebih dulu sebelum class anakPewaris
anakPewaris akan memiliki semua property dan method dari orangTua
juga dapat memiliki property dan method selain dari orangTua

Kenapa perlu inheritance ? 
	-menghindari kode duplikat
	-kemudahan pembuatan class spesifik
	dapat membuat program kompleks dengan kode yang tidak terlalu kompleks

Analogi:
tanpa inherintance

class Mobil
property : warnaCat, jenisMobil
method: tambahKec, kurangKec

classMobilSport
property: warnaCat, jenisMobil, statusTurbo*
method: tambahKec, kurangKec, hidupkanTurbo*

dengan inheritance

class mobilSport --- class spesifik,
property : statusTurbo
method: hidupkanTurbo