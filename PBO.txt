PBO

Bedanya prosedural dgn PBO, prosedur variabel array fungsinya terpisan, kalau di PBO disimpan di 1 tempat yaitu Classs

Class = Design / Template, yang dapat digunakan object; class mendefinisikan object
Object = variabel hasil instansiasi/wujud/representasi dari class

berisi :
	-Properti / Atribut = data pada class (variabel/array dll, dapat lebih dri 1), dapat diisi/diubah setelah representasi object 


	-Method / Behaviour = tindakan yg dapat dilakukan, method bs dijalankan setelah instansiasi object dari class dapat void ataupun return. 
							Dapat nampung parameter, dan bisa lebih dari 1 method.

ex. class mobil; properti : warna, jenis, tipe, banyak ban, dll
method : tambah kecepatan, kurangi kec, belok kiri kanan.

Properti dalam suatu object dari class pasti dapat berbeda, sedangkan methodnya pasti sama. Setiap object dari class dapat melakukan segala method 


===========================================================================================================================================================================================
===========================================================================================================================================================================================


Constructor = mmethod khusus/magic otomatis tereksekusi saat instansiasi object (yang otomatis pertama kali di panggil, persiapan data - mengisi properti data)
 biasanya untuk statement conn database, dan nama constructor biasanya sama seperti class

Destructor = kebalikan - method dijalankan jika object dihapus
biasanya close database, dapat berguna jika ingin menjalankan perintah terntu sebelum object dihapus; 
Bahasa Java gapunya destructor karena garbage collector (hapus object gakepakai)

ex. Constructor - Menghidupkan Mobil atau tampil pesan selamat datang. status semacamnya
constructor(warna,tipe,tipe) --- berisi parameter untuk ngisi properti
	properti blaalba
	mehotd balalabla
ketika selesai :
Destructor - Mematikan Mobil, atau tampilkan pesan terimakasih


===========================================================================================================================================================================================
===========================================================================================================================================================================================


Setter, method yang dibuat untuk mengubah/isi nilai pada property
1 stter 1 property jadi set_WarnaMobil
bersifat void

Getter, mengambil isi nilai dari properti
1 getter 1 property jadi get_WarnaMobil
bersifat return

Setter getter penting untuk
	-keamanan data (visibility - access modifier)
	-mudah kontrol property method
	-classs fleksibel - akses penuh property method
	-dapat ganti sebagian code tanpa takut berdampak dgn code lain

Data dari class harus diproteksi, yang bisa merubah properti hanyalah pemiliknya sendiri
setWarnaMobil(data)
getWarnaCat()->return
setWarnaVelgDepanDanBelakang(data1,data2)
getWarnaVelgDepanDanBelakang()


===========================================================================================================================================================================================
===========================================================================================================================================================================================

Konsep Paradigma PBO
4 konsep paradigma kenapa perlu PBO 
dari inheritance,encasuplation,polymorphism, dan abstrraction

Inheritance(Pewarisan) adalah 
didefinisikan saat membuat class, 1 class bisa banyak keturunan, 
banyak class bisa jadi hasil keturunan 1 class

class orangTua harus dibuat  lebih dulu sebelum class anakPewaris
anakPewaris akan memiliki semua property dan method dari orangTua
juga dapat memiliki property dan method selain dari orangTua

Kenapa perlu inheritance ? 
	-menghindari kode duplikat
	-kemudahan pembuatan class spesifik
	dapat membuat program kompleks dengan kode yang tidak terlalu kompleks

Analogi:
tanpa inherintance

class Mobil
property : warnaCat, jenisMobil
method: tambahKec, kurangKec

classMobilSport
property: warnaCat, jenisMobil, statusTurbo*
method: tambahKec, kurangKec, hidupkanTurbo*

dengan inheritance

class mobilSport --- class spesifik,
property : statusTurbo
method: hidupkanTurbo

===========================================================================================================================================================================================
===========================================================================================================================================================================================

Overiding (replace atau menimpa dengan versi baru)
method dari class induk (superclass) yang ditulis kembali pada anak (subclass)
karena ada yang method dari superclass tidak sesuai jika diterapkan pada subclass

aturan overiding:
	-parameter overiding di subclass harus sama dgn parameter dan return pada superclass
	termasuk URUTAN dan BANYAK PARAMETER serta Tipe data return
	-hak akses pada overiding subclass tidak boleh lebih ketat dibanding superclass

Membuat ulang method tertentu dari superclass menjadi versi baru 
yang menyesuaikan kebutuhan subclass

Overloading (remake atau memperbarui dengan parameter/statement yang baru)
karena ada method dari superclass yang perlu dibuat lebih fleksibel menyesuaikan
kebutuhan anak, misal ada nasi, lauk, minum; pada anak membutuhkan parameter nasi dan lauk
karena tiap anak pasti nasi dan lauknya beda.

aturan overloading : 
	-paramater harus beda, termasuk urutan dan banyaknya
	-aturan hak akses pada anak boleh lebih ketat daripada orangTua, karena instansiasinya
	didapatkan dari anak

dibuat untuk menambahkan sistem kerja method anak tertentu yang sama dengan induk,
menjadi method yang lebih spesifik - menyesuaikan kebutuhan anak (fleksibel)

Keuntungan overide-load:
	-method induk tidak akan berubah
	-memiliki fungsi yang lebih fleksibel untuk subclass
	-subclass tidak perlu menggunakan method dari superclass yg sdh di overide-load
	jika kita ubah caramakan,ubahparameternya otomatis sudah menjadi kendali subclass
	anak itu sendiri.

analogi:
OVERRIDING, PARAMETER HARUS SAMA, SEMUANYA SAMA, 
class mobil
cetakDataMobil():
	=> cetakwarrnacat,jenismobil,tipe

class mobilSport
cetakDataMobil():
	=> cetakwarrnacat,jenismobil,tipe, banyakban*, status turbo*

misal objSportUdin("bla","bla")
objSportUdin => cetakDataMobil() ---- maka akan cek ke class mobilSport dulu apa ada
									method tersebut, kalau ada pake itu, kalau gaada cari di
									class induk (mobil)

OVERLOADING, parameter beda,
class mobil
tambahKec():
	=> kecepatan += 1

class mobilSport
tambahKec(N):
	=> kecepatan += N

misal objSportUdin("bla","bla")
objSportUdin => tambahKec() tanpa parameter
							---- maka akan cek ke class mobilSport dulu apa ada
								method tersebut, kalau ada pake itu, kalau gaada cari di
								class induk (mobil)  jadi ini nanti pake tambahKec()
								di class mobil
objSportUdin => tambahKec(2) ada parameter
							---- maka pake yang di mobilSport karena ada parameter yg sesuai


===========================================================================================================================================================================================
===========================================================================================================================================================================================

